#!/usr/bin/env node
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

/* This file is to help line up the formal conditions listed in source with tests.
 * I look for `sourceGrep` and `testGrep` make make sure that the conditions found,
 * are in both sets.
 */

const { exec } = require('child_process')
const { promisify } = require('util')
const execAsync = promisify(exec)

const ignoreIssueCount = parseInt(process.argv[2] || 0, 10)

const sourceGrep = 'grep -E \'Precondition:|Postcondition(:|\\):)\' modules/**/src/*.ts'
const testGrep = 'grep -E \'Precondition:|Postcondition(:|\\):)\' modules/**/test/*.ts'

Promise.all([
  execAsync(sourceGrep).then(clean),
  execAsync(testGrep).then(clean)
])
  .then(([source, tests]) => {
    let issues = 0
    const sourceSet = new Set(source)
    const testSet = new Set(flatMapForTests(tests))

    if (source.length > sourceSet.size) {
      const duplicateSources = getDuplicates(source)
      console.log('Duplicate source conditions', duplicateSources)
      issues += duplicateSources.length
    }
    // A single test _may_ be multiple conditions.
    const duplicateTests = getDuplicates(tests)
    if (duplicateTests.length) {
      console.log('Duplicate test conditions', duplicateTests)
      issues += duplicateTests.length
    }

    for (const sourceCondition of sourceSet) {
      if (!testSet.has(sourceCondition)) {
        console.log(`Missing test condition ${sourceCondition}`)
        issues += 1
      }
    }

    for (const testCondition of testSet) {
      if (!sourceSet.has(testCondition)) {
        console.log(`Update or change test condition ${testCondition}`)
        issues += 1
      }
    }

    if (issues) {
      console.error(`Issue count found: ${issues}`)
    }

    process.exit(Math.max(0, issues - ignoreIssueCount))
  })

const remove = /(\*\/)|(\/\*)|(it\([`'])|([`'], \(\) => \{)|([`'], async \(\) => \{)/g

function clean ({ stdout }) {
  return stdout.split('\n')
    .map(l => l.replace(remove, ''))
    // Do not try and clean up ' and things like that...
    .map(l => l.split('.ts:').pop().trim())
}

function getDuplicates (arr) {
  const found = new Set()
  return arr.filter(item => {
    if (!found.has(item)) {
      found.add(item)
      return false
    }
    return true
  })
}

/* For a test that covers many conditions, ; can delimit the conditions
 * e.g.
 * Check for early return (Postcondition): Condition 1 ; Check for early return (Postcondition): Condition 2
 * This is primarily useful for Check for early return (Postcondition)
 * as listed above because they can be easily check
 * in a streaming context by increasing the buffer count by 1 byte
 * at every iteration.
 */
function flatMapForTests (tests) {
  const flatMapped = []
  tests.forEach(t => {
    flatMapped.push(...t.split(';').map(t => t.trim()))
  })
  return flatMapped
}
