// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// based on https://github.com/aws/aws-cryptographic-material-providers-library/blob/main/AwsCryptographyPrimitives/test/TestKDF_TestVectors.dfy

import { createHash } from 'crypto'
import {
  SupportedDigestAlgorithms,
  SupportedDerivedKeyLengths,
} from '../src/kdfctr'
import { expect } from 'chai'

interface InternalTestVector {
  name: string
  hash: SupportedDigestAlgorithms
  ikm: Buffer
  info: Buffer
  L: number
  okm: Buffer
}

interface TestVector extends InternalTestVector {
  purpose: Buffer
  L: SupportedDerivedKeyLengths
}

const PURPOSE = Buffer.from('aws-kms-hierarchy', 'utf-8')

const b1: InternalTestVector = {
  name: 'B.1  Test Case 1',
  hash: 'sha256',
  ikm: Buffer.from([
    226, 4, 214, 212, 102, 170, 213, 7, 255, 175, 109, 109, 171, 10, 91, 38, 21,
    44, 158, 33, 231, 100, 55, 4, 100, 227, 96, 200, 251, 199, 101, 198,
  ]),
  info: Buffer.from([
    123, 3, 185, 141, 159, 148, 184, 153, 229, 145, 243, 239, 38, 75, 113, 177,
    147, 251, 167, 4, 60, 126, 149, 60, 222, 35, 188, 83, 132, 188, 26, 98, 147,
    88, 1, 21, 250, 227, 73, 95, 216, 69, 218, 219, 208, 43, 214, 69, 92, 244,
    141, 15, 98, 179, 62, 98, 54, 74, 58, 128,
  ]),
  L: 32,
  okm: Buffer.from([
    119, 13, 250, 182, 166, 164, 164, 190, 224, 37, 127, 243, 53, 33, 63, 120,
    216, 40, 123, 79, 213, 55, 213, 193, 255, 250, 149, 105, 16, 231, 199, 121,
  ]),
}

const b2: InternalTestVector = {
  name: 'B.2  Test Case 2',
  hash: 'sha256',
  ikm: Buffer.from([
    174, 238, 202, 96, 246, 137, 164, 65, 177, 59, 12, 188, 212, 65, 216, 45,
    240, 207, 135, 218, 194, 54, 41, 13, 236, 232, 147, 29, 248, 215, 3, 23,
  ]),
  info: Buffer.from([
    88, 142, 192, 65, 229, 115, 59, 112, 49, 33, 44, 85, 56, 239, 228, 246, 170,
    250, 76, 218, 139, 146, 93, 38, 31, 90, 38, 136, 240, 7, 179, 172, 36, 14,
    225, 41, 145, 231, 123, 140, 184, 83, 134, 120, 97, 89, 102, 22, 74, 129,
    135, 43, 209, 207, 203, 251, 57, 164, 244, 80,
  ]),
  L: 32,
  okm: Buffer.from([
    62, 129, 214, 17, 60, 238, 60, 82, 158, 206, 223, 248, 154, 105, 153, 206,
    37, 182, 24, 193, 94, 225, 209, 157, 69, 203, 55, 106, 28, 142, 35, 116,
  ]),
}

const b3: InternalTestVector = {
  name: 'B.3  Test Case 3',
  hash: 'sha256',
  ikm: Buffer.from([
    149, 200, 247, 110, 17, 54, 126, 181, 85, 38, 162, 179, 147, 174, 144, 101,
    131, 209, 203, 221, 71, 150, 33, 70, 245, 6, 204, 124, 172, 18, 244, 100,
  ]),
  info: Buffer.from([
    202, 214, 14, 144, 75, 158, 156, 139, 254, 180, 168, 26, 127, 103, 211, 189,
    220, 192, 94, 100, 37, 88, 112, 64, 55, 112, 243, 83, 58, 230, 221, 99, 76,
    234, 165, 108, 83, 230, 136, 189, 19, 122, 230, 1, 137, 53, 243, 75, 159,
    176, 132, 234, 72, 228, 198, 136, 246, 187, 179, 136,
  ]),
  L: 32,
  okm: Buffer.from([
    202, 250, 92, 160, 63, 95, 190, 42, 36, 32, 4, 171, 203, 211, 222, 16, 89,
    199, 64, 123, 30, 229, 121, 37, 81, 36, 175, 24, 155, 224, 181, 86,
  ]),
}

const b4: InternalTestVector = {
  name: 'B.4  Test Case 4',
  hash: 'sha256',
  ikm: Buffer.from([
    77, 5, 57, 31, 214, 251, 30, 41, 46, 120, 171, 150, 25, 177, 183, 42, 125,
    99, 238, 89, 215, 67, 93, 215, 24, 151, 185, 255, 126, 231, 174, 112,
  ]),
  info: Buffer.from([
    240, 120, 230, 249, 183, 248, 45, 100, 85, 79, 166, 182, 4, 200, 8, 241,
    155, 31, 106, 214, 114, 125, 183, 170, 111, 28, 134, 105, 78, 16, 75, 82,
    86, 200, 180, 3, 153, 25, 100, 100, 129, 215, 234, 36, 82, 199, 44, 23, 163,
    232, 215, 211, 145, 98, 133, 70, 10, 165, 235, 129,
  ]),
  L: 32,
  okm: Buffer.from([
    107, 22, 232, 245, 59, 131, 26, 165, 232, 107, 249, 122, 92, 79, 163, 125,
    8, 155, 193, 114, 218, 90, 30, 127, 102, 45, 212, 165, 149, 51, 154, 183,
  ]),
}

const b5: InternalTestVector = {
  name: 'B.5  Test Case 5',
  hash: 'sha256',
  ikm: Buffer.from([
    15, 104, 168, 47, 241, 103, 22, 52, 204, 145, 54, 197, 100, 169, 224, 42,
    118, 118, 33, 221, 116, 161, 191, 92, 36, 18, 155, 128, 130, 20, 183, 82,
  ]),
  info: Buffer.from([
    100, 133, 153, 128, 156, 44, 78, 124, 106, 94, 108, 68, 159, 0, 49, 235,
    245, 92, 54, 97, 168, 149, 180, 77, 176, 87, 46, 232, 128, 131, 177, 244,
    177, 38, 2, 170, 85, 252, 29, 241, 80, 166, 90, 109, 110, 237, 160, 170,
    121, 164, 52, 161, 3, 155, 145, 181, 165, 143, 199, 241,
  ]),
  L: 32,
  okm: Buffer.from([
    226, 151, 100, 15, 119, 104, 72, 93, 74, 110, 124, 254, 36, 95, 139, 250,
    132, 112, 13, 153, 118, 38, 146, 234, 26, 66, 92, 204, 2, 117, 232, 245,
  ]),
}

const b6: InternalTestVector = {
  name: 'B.6 Test Case 6',
  hash: 'sha384',
  ikm: Buffer.from([
    130, 44, 118, 74, 27, 17, 112, 133, 193, 15, 14, 104, 152, 20, 210, 191,
    189, 155, 67, 40, 127, 26, 140, 117, 215, 149, 169, 131, 26, 40, 97, 132,
    200, 88, 111, 53, 119, 182, 229, 187, 206, 22, 55, 146, 94, 4, 252, 71,
  ]),
  info: Buffer.from([
    175, 52, 97, 16, 185, 65, 177, 29, 33, 137, 49, 108, 159, 194, 185, 244, 33,
    55, 117, 165, 215, 54, 141, 53, 65, 38, 120, 162, 143, 205, 3, 176, 127, 5,
    73, 102, 110, 253, 243, 12, 128, 240, 171, 85, 99, 114, 10, 86, 239, 97,
    106, 19, 187, 143, 119, 128, 3, 111, 192, 142,
  ]),
  L: 32,
  okm: Buffer.from([
    224, 174, 35, 92, 184, 35, 128, 82, 123, 231, 105, 52, 166, 150, 34, 57,
    109, 144, 231, 191, 167, 226, 210, 149, 228, 55, 91, 206, 224, 209, 177, 1,
  ]),
}

const b7: InternalTestVector = {
  name: 'B.7 Test Case 7',
  hash: 'sha384',
  ikm: Buffer.from([
    52, 14, 33, 45, 117, 142, 131, 204, 91, 137, 228, 181, 106, 134, 238, 140,
    150, 49, 174, 78, 75, 186, 236, 21, 172, 9, 94, 164, 64, 123, 199, 182, 52,
    173, 99, 13, 208, 190, 133, 169, 28, 8, 168, 199, 225, 225, 3, 11,
  ]),
  info: Buffer.from([
    60, 213, 86, 26, 209, 47, 173, 252, 228, 8, 224, 65, 128, 175, 206, 227,
    139, 131, 21, 107, 158, 75, 224, 119, 156, 79, 13, 185, 226, 107, 254, 92,
    205, 67, 225, 89, 33, 151, 124, 210, 107, 29, 184, 40, 139, 128, 8, 158,
    183, 209, 187, 215, 245, 158, 16, 17, 179, 225, 139, 81,
  ]),
  L: 32,
  okm: Buffer.from([
    5, 250, 87, 123, 112, 129, 33, 14, 124, 157, 230, 157, 176, 61, 124, 32, 38,
    207, 68, 105, 169, 11, 250, 41, 241, 194, 193, 8, 24, 212, 99, 224,
  ]),
}

const b8: InternalTestVector = {
  name: 'B.8 Test Case 8',
  hash: 'sha384',
  ikm: Buffer.from([
    0, 161, 45, 60, 228, 255, 117, 166, 227, 15, 65, 243, 85, 124, 130, 106,
    241, 50, 107, 99, 2, 244, 206, 136, 123, 173, 61, 51, 23, 165, 72, 200, 192,
    58, 5, 114, 132, 220, 195, 141, 139, 198, 144, 189, 74, 86, 95, 71,
  ]),
  info: Buffer.from([
    36, 197, 192, 178, 200, 16, 223, 160, 142, 53, 215, 254, 235, 184, 199, 142,
    12, 215, 38, 201, 46, 205, 66, 217, 23, 16, 19, 115, 140, 162, 83, 26, 148,
    127, 82, 60, 55, 246, 76, 219, 4, 48, 91, 217, 105, 209, 214, 249, 236, 212,
    100, 5, 210, 130, 128, 249, 104, 80, 11, 167,
  ]),
  L: 32,
  okm: Buffer.from([
    174, 243, 213, 124, 141, 167, 217, 88, 44, 93, 28, 98, 214, 182, 72, 150,
    218, 155, 27, 14, 64, 18, 164, 76, 220, 61, 207, 75, 112, 173, 108, 102,
  ]),
}

const b9: InternalTestVector = {
  name: 'B.9 Test Case 9',
  hash: 'sha384',
  ikm: Buffer.from([
    0, 0, 217, 183, 236, 111, 190, 253, 242, 86, 253, 104, 34, 11, 82, 5, 172,
    101, 162, 0, 17, 69, 17, 140, 80, 186, 107, 101, 112, 50, 25, 139, 139, 124,
    227, 178, 247, 6, 138, 120, 13, 193, 124, 34, 69, 154, 242, 183,
  ]),
  info: Buffer.from([
    216, 87, 84, 28, 98, 184, 87, 86, 220, 115, 222, 125, 194, 216, 111, 93, 94,
    139, 40, 51, 139, 176, 169, 69, 181, 196, 253, 124, 129, 247, 25, 97, 185,
    112, 93, 61, 21, 59, 25, 25, 93, 0, 59, 116, 33, 32, 104, 237, 16, 249, 108,
    83, 67, 134, 83, 8, 122, 1, 82, 207,
  ]),
  L: 20,
  okm: Buffer.from([
    121, 62, 241, 19, 249, 99, 151, 171, 0, 49, 234, 160, 250, 167, 119, 193, 7,
    231, 208, 60,
  ]),
}

const b10: InternalTestVector = {
  name: 'B.10 Test Case 10',
  hash: 'sha384',
  ikm: Buffer.from([
    79, 61, 116, 77, 62, 68, 158, 6, 39, 191, 68, 152, 116, 56, 40, 248, 110,
    99, 143, 96, 98, 10, 126, 212, 167, 201, 181, 176, 115, 105, 28, 158, 201,
    71, 40, 197, 136, 34, 232, 39, 240, 246, 204, 248, 109, 188, 28, 174,
  ]),
  info: Buffer.from([
    48, 31, 238, 178, 94, 108, 168, 80, 62, 205, 130, 31, 29, 55, 135, 174, 191,
    179, 208, 236, 81, 139, 179, 17, 116, 245, 32, 155, 42, 193, 242, 142, 211,
    230, 152, 115, 107, 173, 16, 161, 142, 60, 189, 181, 220, 39, 187, 209, 45,
    5, 139, 54, 219, 8, 146, 249, 207, 208, 131, 0,
  ]),
  L: 20,
  okm: Buffer.from([
    133, 239, 149, 5, 178, 48, 86, 94, 204, 242, 166, 74, 179, 222, 83, 229,
    169, 28, 123, 81,
  ]),
}

const c1: TestVector = {
  name: 'C.1 Test Case 1',
  hash: 'sha256',
  ikm: Buffer.from([
    125, 201, 189, 252, 37, 52, 4, 124, 254, 99, 233, 235, 41, 123, 119, 82, 81,
    73, 237, 125, 74, 252, 233, 198, 68, 15, 53, 14, 97, 239, 62, 208,
  ]),
  info: Buffer.from([
    119, 218, 233, 62, 104, 155, 88, 29, 62, 6, 235, 1, 200, 211, 186, 2,
  ]),
  purpose: PURPOSE,
  L: 32,
  okm: Buffer.from([
    188, 232, 152, 114, 85, 137, 174, 192, 143, 152, 52, 179, 184, 15, 220, 63,
    241, 115, 144, 126, 85, 116, 231, 41, 253, 206, 18, 124, 247, 109, 183, 204,
  ]),
}

const c2: TestVector = {
  name: 'C.2 Test Case 2',
  hash: 'sha256',
  ikm: Buffer.from([
    80, 22, 113, 23, 118, 68, 10, 32, 75, 169, 199, 192, 255, 220, 214, 60, 182,
    1, 126, 147, 171, 233, 110, 177, 35, 145, 217, 129, 30, 9, 80, 159,
  ]),
  info: Buffer.from([
    210, 241, 192, 158, 103, 66, 27, 35, 143, 66, 168, 189, 82, 171, 211, 252,
  ]),
  purpose: PURPOSE,
  L: 32,
  okm: Buffer.from([
    54, 206, 174, 72, 237, 133, 85, 156, 93, 53, 120, 152, 118, 82, 89, 33, 114,
    98, 204, 236, 138, 57, 162, 118, 85, 92, 199, 232, 240, 252, 92, 97,
  ]),
}

const c3: TestVector = {
  name: 'C.3 Test Case 3',
  hash: 'sha256',
  ikm: Buffer.from([
    57, 90, 16, 46, 83, 54, 189, 241, 27, 242, 237, 236, 246, 66, 54, 226, 74,
    112, 79, 156, 208, 13, 148, 71, 117, 211, 139, 57, 73, 69, 122, 236,
  ]),
  info: Buffer.from([
    51, 15, 183, 124, 82, 229, 249, 86, 117, 148, 237, 162, 27, 243, 173, 108,
  ]),
  purpose: PURPOSE,
  L: 32,
  okm: Buffer.from([
    22, 55, 236, 141, 159, 163, 250, 236, 86, 47, 225, 103, 156, 225, 228, 146,
    166, 45, 244, 39, 136, 163, 205, 200, 116, 193, 20, 147, 112, 254, 210, 194,
  ]),
}

const c4: TestVector = {
  name: 'C.4 Test Case 4',
  hash: 'sha256',
  ikm: Buffer.from([
    152, 192, 25, 223, 239, 154, 175, 67, 237, 250, 184, 146, 228, 243, 227, 1,
    128, 247, 228, 152, 142, 131, 149, 41, 60, 70, 244, 58, 166, 234, 86, 189,
  ]),
  info: Buffer.from([
    243, 160, 102, 127, 219, 137, 115, 38, 187, 216, 48, 80, 151, 168, 148, 71,
  ]),
  purpose: PURPOSE,
  L: 32,
  okm: Buffer.from([
    191, 112, 86, 234, 220, 233, 122, 154, 100, 188, 230, 238, 239, 155, 54, 32,
    97, 35, 51, 160, 121, 235, 42, 64, 145, 105, 15, 153, 162, 89, 9, 156,
  ]),
}

const c5: TestVector = {
  name: 'C.5 Test Case 5',
  hash: 'sha256',
  ikm: Buffer.from([
    166, 236, 116, 51, 140, 189, 192, 175, 42, 154, 51, 26, 208, 149, 76, 159,
    174, 162, 207, 4, 108, 232, 196, 240, 12, 57, 228, 155, 97, 75, 42, 66,
  ]),
  info: Buffer.from([
    236, 169, 233, 45, 43, 25, 122, 243, 152, 191, 154, 55, 45, 134, 159, 220,
  ]),
  purpose: PURPOSE,
  L: 32,
  okm: Buffer.from([
    156, 11, 20, 251, 100, 227, 163, 161, 30, 45, 242, 2, 248, 246, 44, 11, 88,
    132, 189, 175, 95, 96, 61, 44, 98, 160, 212, 136, 140, 222, 57, 151,
  ]),
}

// These test cases are a grab bag of configuration
// These sizes come from asking Dafny to generate tests for this code.
// The highlights were strange lengths of buffers, and expected key length.
// Dafny found that the interesting `L` was 2147482807.
// Way to huge to be practical, and JS limits us to 32...
// So these focus on

const t1: TestVector = {
  name: '256 with empty info/nonce and purpose',
  hash: 'sha256',
  ikm: Buffer.from([
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ]),
  info: Buffer.from([]),
  purpose: Buffer.from([]),
  L: 32,
  okm: Buffer.from([
    131, 81, 40, 59, 15, 210, 28, 71, 12, 87, 94, 236, 126, 33, 233, 108, 95,
    149, 146, 127, 4, 11, 241, 34, 234, 165, 22, 19, 114, 10, 141, 187,
  ]),
}

const t2: TestVector = {
  name: '256 with empty purpose',
  hash: 'sha256',
  ikm: Buffer.from([
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ]),
  info: Buffer.from([0, 0, 0]),
  purpose: Buffer.from([]),
  L: 32,
  okm: Buffer.from([
    162, 137, 147, 225, 21, 174, 44, 20, 121, 29, 226, 152, 146, 76, 195, 64,
    174, 149, 122, 67, 111, 209, 67, 10, 87, 112, 245, 42, 14, 133, 247, 131,
  ]),
}

const t3: TestVector = {
  name: '256 with empty info/nonce',
  hash: 'sha256',
  ikm: Buffer.from([
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ]),
  info: Buffer.from([]),
  purpose: Buffer.from([0, 0, 0]),
  L: 32,
  okm: Buffer.from([
    162, 137, 147, 225, 21, 174, 44, 20, 121, 29, 226, 152, 146, 76, 195, 64,
    174, 149, 122, 67, 111, 209, 67, 10, 87, 112, 245, 42, 14, 133, 247, 131,
  ]),
}

const t4: TestVector = {
  name: '384 with empty info/nonce and purpose',
  hash: 'sha384',
  ikm: Buffer.from([
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ]),
  info: Buffer.from([]),
  purpose: Buffer.from([]),
  L: 32,
  okm: Buffer.from([
    77, 201, 182, 192, 122, 4, 68, 27, 246, 185, 15, 31, 62, 179, 227, 246, 181,
    129, 114, 189, 185, 1, 61, 118, 67, 14, 77, 219, 40, 6, 123, 205,
  ]),
}

const t5: TestVector = {
  name: '384 with empty purpose',
  hash: 'sha384',
  ikm: Buffer.from([
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ]),
  info: Buffer.from([0, 0, 0]),
  purpose: Buffer.from([]),
  L: 32,
  okm: Buffer.from([
    169, 94, 115, 125, 197, 199, 196, 79, 166, 30, 97, 233, 173, 170, 235, 242,
    13, 176, 204, 52, 135, 119, 6, 237, 104, 18, 186, 179, 255, 64, 13, 78,
  ]),
}

const t6: TestVector = {
  name: '384 with empty info/nonce',
  hash: 'sha384',
  ikm: Buffer.from([
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ]),
  info: Buffer.from([]),
  purpose: Buffer.from([0, 0, 0]),
  L: 32,
  okm: Buffer.from([
    169, 94, 115, 125, 197, 199, 196, 79, 166, 30, 97, 233, 173, 170, 235, 242,
    13, 176, 204, 52, 135, 119, 6, 237, 104, 18, 186, 179, 255, 64, 13, 78,
  ]),
}

export const rawTestVectors = [b1, b2, b3, b4, b5, b6, b7, b8, b9, b10]
export const testVectors = [c1, c2, c3, c4, c5, t1, t2, t3, t4, t5, t6]

export const vectorOkmDigest = Buffer.from([
  183, 87, 35, 163, 83, 138, 133, 68, 69, 201, 220, 32, 102, 155, 232, 241, 122,
  8, 244, 48, 26, 60, 130, 7, 161, 138, 47, 123, 44, 65, 31, 56,
])

export const testVectorDigest = () =>
  createHash('sha256')
    .update(
      Buffer.from(
        [...rawTestVectors, ...testVectors].flatMap((v) => [...v.okm])
      )
    )
    .digest()

// It is complicated to check every byte of ever vector
// This takes all the okm values and digests them.
// This way it is easy for us to say
// that JS and Dafny are testing the same test vectors.
// I only use okm because there is a deterministic relationship
// between all inputs and the okm.
it('Make sure that the test vectors are the same', () => {
  expect(testVectorDigest()).to.deep.equal(vectorOkmDigest)
})
